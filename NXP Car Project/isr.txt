/*
 * isr.c
 */

#include "isr.h"
#include "MK64F12.h"
#include <stdio.h>
#include "uart.h"
#include "main.h"
//variables global to the IRQ handlers which dictates if timer is enabled &	timer counter
int timer = 0;
int timer2 = 0;
int timer_counter= 0;
int switch2 = 0;
char temp[100]; 
int checkOff1 = 0;
int checkOff2 = 0;
int checkOff3 = 0;
void PDB0_IRQHandler(void){ //For PDB timer
	
	//Clear interrupt in register PDB0_SC
	PDB0_SC &= ~PDB_SC_PDBIF_MASK;

	//toggle the output state for LED1
	if (timer) {
		if(status == wait) {
			//blink red
			GPIOB_PTOR = (1 << 22); 	//Red on
	} else if (status == scan) {
		  if (((GPIOB_PDIR&(1 << 22)) == 0) && (checkOff1 == 0)) {
					GPIOB_PDOR |= (1 << 22);  //Red off
				  checkOff1 = 1;
			}
			checkOff1 = 1;
		  //blink yellow
			GPIOB_PTOR = (1 << 22); 	//Red on
			GPIOE_PTOR = (1 << 26);		//Green on
	} else if (status == ready) {
			if (((GPIOB_PDIR&(1 << 22)) == 0) && ((GPIOE_PDIR&(1 << 26)) == 0) && (checkOff2 == 0)) {
					GPIOB_PDOR |= (1 << 22);  //Red off
				  GPIOE_PDOR |= (1 << 26);  //Green off
				  checkOff2 = 1;
			}
			checkOff2 = 1;
		  //blink green
			GPIOE_PTOR = (1 << 26);		//Green on
	} else if (status == run) {
      if (((GPIOE_PDIR&(1 << 26)) == 0) && (checkOff3 == 0)) {
					GPIOE_PDOR |= (1 << 26);  //Green off
				  checkOff3 = 1;
			}
			checkOff3 = 1;		
		
		  //blink white
			GPIOE_PTOR = (1 << 26);		//Green on
			GPIOB_PTOR = (1 << 21);		//Blue on
			GPIOB_PTOR = (1 << 22);		//Red on
	}
}
	return;
}
	
//void FTM0_IRQHandler(void){ //For FTM timer
//	
//	//clear interrupt in the register FTM0_SC
//	FTM0_SC &= ~FTM_SC_TOF_MASK;
//	
//	//check if switch2 has set to the local variable
//	if(timer2){
//		
//		 //increment the local variable counter
//		 timer_counter++;
//	} 
//	return;
//}
//	
void PORTC_IRQHandler(void){ //For switch 2
	
	//clear the interrupt
	PORTC_PCR6 |= PORT_PCR_ISF_MASK;
	
	//if timer is enable
	if (timer == 1) {
			PDB0_SC &= ~PDB_SC_PDBEN_MASK;
			PDB0_SC |= PDB_SC_LDOK_MASK;
		 //disable timer
		 timer = 0;
		
	//else
	} else {
		
		 //enable the timer
		 timer = 1;
		
		//start it with a trigger
		PDB0_SC |= PDB_SC_PDBEN_MASK;
		PDB0_SC |= PDB_SC_SWTRIG_MASK;
		PDB0_SC |= PDB_SC_LDOK_MASK;
	}
	return;
}
	
//void PORTC_IRQHandler(void){ //For switch 2
//	
//	//clear the interrupt
//	PORTC_PCR6 |= PORT_PCR_ISF_MASK;
//	
//	//if switch2 is pressed 
//	if ((GPIOC_PDIR&(1 << 6)) == 0){
//		
//       FTM0_MODE &=~ (FTM_MODE_FTMEN_MASK);
//	   //reset the FlexTimer
//       FTM0_CNT = FTM_CNT_COUNT(0x0000);
//	   FTM0_SC &= ~(FTM_SC_TOF_MASK);

//       FTM0_MODE |= (FTM_MODE_FTMEN_MASK);
//		
//	   //reset the timer counter
//       timer_counter = 0;
//       timer2 = 1;

//		
//       //turn on the blue LED while the button is pressed
//	   GPIOB_PDOR &= ~(1 << 21);
//		
//	}else if(timer2 == 1) {
//		 //reset the local variable to affect the timer2 function
//		 timer2 = 0;
//		
//		 //turn off the blue LED while button is up
//		 GPIOB_PDOR |= (1 << 21);	
//		
//		 //print the result
//		 sprintf(temp,"Button held for %d milliseconds!\r\n",timer_counter);
//     uart_put(temp);
//	 }
//	return;
//}


/* PIT0 determines the integration period
*		When it overflows, it triggers the clock logic from
*		FTM2. Note the requirement to set the MOD register
* 	to reset the FTM counter because the FTM counter is 
*		always counting, I am just enabling/disabling FTM2 
*		interrupts to control when the line capture occurs
*/
void PIT0_IRQHandler(void){
	if (debugcamdata) {
		// Increment capture counter so that we can only 
		//	send line data once every ~2 seconds
		capcnt += 1;
	}
	// Clear interrupt
	PIT_TFLG0 |= PIT_TFLG_TIF_MASK;
	
	// Setting mod resets the FTM counter
	FTM2_MOD = 100;
	
	// Enable FTM2 interrupts (camera)
	FTM2_SC |= FTM_SC_TOIE_MASK;
	
	return;
}


/* Initialization of FTM2 for camera */
void init_FTM2(){
	// Enable clock
	SIM_SCGC6 |= SIM_SCGC6_FTM2_MASK;

	// Disable Write Protection
	FTM2_MODE |= FTM_MODE_WPDIS_MASK;
	
	// Set output to '1' on init
	FTM2_OUTINIT |= FTM_OUTINIT_CH0OI_MASK;
	
	// Initialize the CNT to 0 before writing to MOD
	FTM2_CNT = 0;
	
	// Set the Counter Initial Value to 0
	FTM2_CNTIN = 0;
	
	// Set the period (~10us)
	FTM2_MOD = 100;
	
	// 50% duty
	FTM2_C0V = 50;
	
	// Set edge-aligned mode
	FTM2_C0SC |= FTM_CnSC_MSB_MASK;
	
	// Enable High-true pulses
	// ELSB = 1, ELSA = 0
  FTM2_C0SC |= FTM_CnSC_ELSB_MASK;
  FTM2_C0SC &= ~FTM_CnSC_ELSA_MASK;
	
	// Enable hardware trigger from FTM2
	FTM2_EXTTRIG |= FTM_EXTTRIG_INITTRIGEN_MASK;
	
	// Don't enable interrupts yet (disable)
	FTM2_SC &= ~(FTM_SC_TOIE_MASK);
	
	// No prescalar, system clock
	FTM2_SC = FTM_SC_PS(0) | FTM_SC_CLKS(1);
	
	// Set up interrupt
	NVIC_EnableIRQ(FTM2_IRQn);
	
	return;
}

/* Initialization of PIT timer to control 
* 		integration period
*/
void init_PIT(void){
	// Setup periodic interrupt timer (PIT)
	SIM_SCGC6 |= SIM_SCGC6_PIT_MASK;
    
	// Enable clock for timers
  PIT_MCR &= ~(PIT_MCR_MDIS_MASK);
	
	// Enable timers to continue in debug mode
	PIT_MCR = PIT_MCR_FRZ_MASK; // In case you need to debug
	
	// PIT clock frequency is the system clock
	// Load the value that the timer will count down from
	PIT_LDVAL0 = (uint32_t) (INTEGRATION_TIME * DEFAULT_SYSTEM_CLOCK);
	
	// Enable timer interrupts
	PIT_TCTRL0 |= PIT_TCTRL_TIE_MASK;
	
	// Enable the timer
	PIT_TCTRL0 |= PIT_TCTRL_TEN_MASK;

	// Clear interrupt flag
	PIT_TFLG0 |= PIT_TFLG_TIF_MASK;

	// Enable PIT interrupt in the interrupt controller
	NVIC_EnableIRQ(PIT0_IRQn);
	return;
}


/* Set up pins for GPIO
* 	PTB9 		- camera clk
*		PTB23		- camera SI
*		PTB22		- red LED
*/
void init_GPIO(void){
	// Enable LED and GPIO so we can see results
    SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; // Clock
    PORTB_PCR22 |= PORT_PCR_MUX(1);    // GPIO
    GPIOB_PDDR |= (1 << 22);           // output mode
    GPIOB_PDOR |= (1 << 22);           // turn off
    PORTB_PCR9 |= PORT_PCR_MUX(1) | PORT_PCR_DSE_MASK; //PTB9
    GPIOB_PDDR |= (1 << 9);            // output mode
    GPIOB_PDOR |= (1 << 9);            // turn off
    PORTB_PCR23 |= PORT_PCR_MUX(1) | PORT_PCR_DSE_MASK; //PTB23
    GPIOB_PDDR |= (1 << 23);           // output mode
    GPIOB_PDOR |= (1 << 23);           // turn off
	return;
}

/* Set up ADC for capturing camera data */
void init_ADC0(void) {
    unsigned int calib;
    // Turn on ADC0
    SIM_SCGC6 |= SIM_SCGC6_ADC0_MASK;
	
	// Single ended 16 bit conversion, no clock divider
	ADC0_CFG1 |= ADC_CFG1_MODE_MASK | ADC_CFG1_ADIV(0);
    
  // Do ADC Calibration for Singled Ended ADC. Do not touch.
  ADC0_SC3 = ADC_SC3_CAL_MASK;
    while ( (ADC0_SC3 & ADC_SC3_CAL_MASK) != 0 );
    calib = ADC0_CLP0; calib += ADC0_CLP1; calib += ADC0_CLP2;
    calib += ADC0_CLP3; calib += ADC0_CLP4; calib += ADC0_CLPS;
    calib = calib >> 1; calib |= 0x8000;
    ADC0_PG = calib;
    
    // Select hardware trigger.
    ADC0_SC2 |= ADC_SC2_ADTRG_MASK;
    
    // Set to single ended mode	
	  ADC0_SC1A = (0x40);
	  //ADC0_SC1A &= ~ADC_SC1_DIFF_MASK;
    
	// Set up FTM2 trigger on ADC0
	SIM_SOPT7 |= SIM_SOPT7_ADC0TRGSEL(0xA);      // FTM2 select
	SIM_SOPT7 |= SIM_SOPT7_ADC0ALTTRGEN_MASK;    // Alternative trigger en.
	SIM_SOPT7 &= ~(SIM_SOPT7_ADC0PRETRGSEL_MASK);// Pretrigger A
	
	// Enable NVIC interrupt
  NVIC_EnableIRQ(ADC0_IRQn);
}
